from math import dist

f = open('27A_1.xlsx')
a = [] # список координат всех точек
for s in f:
    x, y = map(float, s.split()) # считываем две точки
    a.append([x, y]) # добавляем список точек в массив
c = [] # создадим один массив для всех кластеров
while a: # пока есть хотя бы одна точка, которую мы не проверили
    c += [[a.pop()]] # "вырезать", то есть, удаляет из списка, но сохраняет в буфер, а потом добавляет в кластер
    # двойной массив, т.к. отдельный кластер с координатами [x, y] лежит в массиве кластеров c = []
    for t in c[-1]: # для последнего кластера ([-1]) будет искать все пересечения е
        sosed = [x for x in a if dist(t, x) < 1] # находим соседей - проверяем все возможные точки в a, если дистанция между t и x < 1
        # 1 - условная, предпологаемая единица (мы не знаем дистанцию между точками, главное - она меньше расстояния между кластерами)
        c[-1] += sosed # присоединяем список соседей к последнему кластеру, потому что по соседям тоже нужно пробежаться
        for p in sosed: a.remove(p) # если точка уже была в списке соседей, то мы ее удаляем
    # из-за того, что список соседей добавляется к последнему кластеру, каждая новая соседняя точка будет последней
    # эту точку мы уже начинаем проверять на наличие соседей
    # 1) соседние точки добавляются в кластер
    # 2) когда у точек не остается соседей, цикл while переходит на другие точки и создает новый кластер
    # 3) когда все точки добавлены в клатсера, цикл завершается
    
